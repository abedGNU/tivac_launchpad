
Although these are technically perhaps not tiva branded products I just
got an MSP432 launchpad which is a cortex-m4 based, that is not
confusing at all with msp430 being some completely different processor.

So they have switched the front end debugger portion to be compatible
with XDS100 and/or CMSIS-DAP (or both).

git clone git://repo.or.cz/openocd.git
cd openocd
./bootstrap
./configure --enable-cmsis-dap
make
sudo make install

my openocd script msp432.cfg is cobbled together from an stm32 one,
there might be a stock one from openocd that works in parallel with
cmsis-dap.cfg.  If you use mine you wont need other cfg files.

in one window

openocd -f msp432.cfg

in another window

telnet localhost 4444
> halt
> load_image /path/to/myprog.elf
> resume 0x01000000

Whatever directory you run the openocd server in is the base directory
so if you are in your programs development directory then you dont
need the path

cd blinker01
openocd -f ../msp432.cfg

then you can just do a load_image blinker01.gcc.thumb.sram.elf without
a path.

flash01 works to erase the first part of the user (main) flash causing
you to end up in the BSL when you reset or power cycle.

flash02 will erase and place a blinker program there so when you reset
or power cycle it will run that.  It does not setup anything but the
gpio (well holds the wdt) so it is a fairly clean boot, leaving you
to be able to develop programs that initalize everything from a power
on reset environment.

flash03 is the cleanest and probably the first thing to run as the
rest of the examples assume this has been run.  Like flash02, but
all it does is stop the WDT and then go into an infinite loop, doesnt
mess with GPIO, etc.

My board came with an app that used the DCOCLK at 3MHz, flash03 shows
that that is the default for a simple flash based application.  The
uart01 program uart_init() can be used with the proper line uncommented
for initalizing the uart for 115200 with a 3MHz SMCLK (SMCLK powers up
with a divide by 1).

If you use flash01 to erase the flash but not replace it with anything
the docs are very brief but say if they dont detect user code they go
into the BSL which appears to set for a 12MHz clock.  Likewise uart01
flash02 can be used with a uart_init() and the proper line uncommented
for 12MHz SMCLK.

Most if not all of the remaining examples assume that you have used
flash03 to erase and replace the firmware on the flash.
