
Tiva C Launchpad Bare Metal Examples

www.ti.com/launchpad


This directory tree is for the simpler Tiva C launchpad.
Not the connected one, although currently you navigate from the
above page using the connected launchpad to the one currently
called the EK-TM4C123GXL.

ti bought a company called Luminary Micro that had a stellaris product
line, AFAIK the first cortex-m products to hit the market.  Over time
they replaced the stellaris name and lm4* product numbers to be
the Tiva C product line.

So this started off as a stellaris launchpad example and is now based
on the current tiva c name, AFAIK the examples work on both.

This is the current link.  We all know that links can/do change.

http://www.ti.com/ww/en/launchpad/launchpads-connected-ek-tm4c123gxl.html

So you can search for EK-TM4C123GXL perhaps if needed, the name of the
evaluation kit/board.   The microcontroller on that board is currently
the TM4C123GH6PM  which you can follow the link to or search for.

Currently under the board there is a users guide that you may want for
the schematic and pinouts, although the pinouts are shown in the
silkscreen.

Under the part I currently see the datasheet, you definitely need this
and there is a ti part errata and a cortex-m4 errata.  Understand you
have to be very careful with errata to apply it correctly to the
stepping of part you are using, you could easily be trying to apply
workarounds to something that isnt broken or a workaround that in
no way works or can be applied to the part you are using.

You will also want the Architectural Reference Manual and the Technical
Reference Manual for the cortex-m4 which uses architecture armv7-m.

At this time I can simply

apt-get lm4flash

To get the tool I like to use to download programs to the target
microcontroller.  If that doesnt work for you depending on your distro
you can build it from sources.  No promises that this works nor that
the dependencies have been met you may need to apt-get more stuff.

apt-get install libusb-1.0.0-dev build-essential

git clone http://github.com/utzig/lm4tools.git
cd lm4tools/lm4flash
make

You also need a toolchain, see the TOOLCHAIN file one directory up.

The blinker01 example shows how to use clang/llvm tools as well as gcc.
Seems like every version of llvm you have to change the command line
parameters to make it work, so I am not going to keep all my makefiles
up to date, doesnt mean the blinker01 makefile is always up to date either.

I am using the micro usb port on the top of the board which is labelled
debug.  And I slide the switch on the board over to the debug side.

Then I can load and run a new program using this command

lm4flash hello.bin

The program is stored in the on chip flash so pressing the reset button
or unplugging and replugging power (the usb port) the program will
start or run again.

I recommend you start with the blinker01 example.  My raspberrypi repo
has a baremetal and bssdata directory with READMEs that describe how
I use gnu tools.

I like that you can get at the target uart through the debug interface
on linux /dev/ttyACM0, the uart examples exploit that, no other boards
are needed basically to do more advanced development.
